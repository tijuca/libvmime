From: peter green <plugwash@p10link.net>
Date: Mon, 1 Feb 2016 22:01:21 +0100
Subject: remove calls to deprecated gnutls_*_set_priority

The gnutls_*_set_priority functions have been removed. According to

  http://www.gnutls.org/manual/html_node/Upgrading-from-previous-versions.html

the replacement is gnutls_priority_set_direct but the settings used seem
rather outdated anyway, so rather than converting I just removed them.
(so gnutls will use it's defaults).
---
 src/net/tls/TLSSession.cpp | 72 ----------------------------------------------
 1 file changed, 72 deletions(-)

diff --git a/src/net/tls/TLSSession.cpp b/src/net/tls/TLSSession.cpp
index 18fc622..7365c5c 100644
--- a/src/net/tls/TLSSession.cpp
+++ b/src/net/tls/TLSSession.cpp
@@ -111,78 +111,6 @@ TLSSession::TLSSession(ref <security::cert::certificateVerifier> cv)
 	// macs and compression methods.
 	gnutls_set_default_priority(*m_gnutlsSession);
 
-	// Sets the priority on the certificate types supported by gnutls.
-	// Priority is higher for types specified before others. After
-	// specifying the types you want, you must append a 0.
-	const int certTypePriority[] = { GNUTLS_CRT_X509, 0 };
-
-	res = gnutls_certificate_type_set_priority
-		(*m_gnutlsSession, certTypePriority);
-
-	if (res < 0)
-	{
-		throwTLSException
-			("gnutls_certificate_type_set_priority", res);
-	}
-
-	// Sets the priority on the protocol types
-	const int protoPriority[] = { GNUTLS_TLS1, GNUTLS_SSL3, 0 };
-
-	res = gnutls_protocol_set_priority(*m_gnutlsSession, protoPriority);
-
-	if (res < 0)
-	{
-		throwTLSException
-			("gnutls_certificate_type_set_priority", res);
-	}
-
-	// Priority on the ciphers
-	const int cipherPriority[] =
-	{
-		GNUTLS_CIPHER_ARCFOUR_128,
-		GNUTLS_CIPHER_3DES_CBC,
-		GNUTLS_CIPHER_AES_128_CBC,
-		GNUTLS_CIPHER_AES_256_CBC,
-		GNUTLS_CIPHER_ARCFOUR_40,
-		GNUTLS_CIPHER_RC2_40_CBC,
-		GNUTLS_CIPHER_DES_CBC,
-		0
-	};
-
-	gnutls_cipher_set_priority(*m_gnutlsSession, cipherPriority);
-
-	// Priority on MACs
-	const int macPriority[] = { GNUTLS_MAC_SHA, GNUTLS_MAC_MD5, 0};
-
-	gnutls_mac_set_priority(*m_gnutlsSession, macPriority);
-
-	// Priority on key exchange methods
-	const int kxPriority[] =
-	{
-		GNUTLS_KX_RSA,
-		GNUTLS_KX_DHE_DSS,
-		GNUTLS_KX_DHE_RSA,
-		GNUTLS_KX_ANON_DH,
-		GNUTLS_KX_SRP,
-		GNUTLS_KX_RSA_EXPORT,
-		GNUTLS_KX_SRP_RSA,
-		GNUTLS_KX_SRP_DSS,
-		0
-	};
-
-	gnutls_kx_set_priority(*m_gnutlsSession, kxPriority);
-
-	// Priority on compression methods
-	const int compressionPriority[] =
-	{
-		GNUTLS_COMP_ZLIB,
-		//GNUTLS_COMP_LZO,
-		GNUTLS_COMP_NULL,
-		0
-	};
-
-	gnutls_compression_set_priority(*m_gnutlsSession, compressionPriority);
-
 	// Initialize credentials
 	gnutls_credentials_set(*m_gnutlsSession,
 		GNUTLS_CRD_ANON, g_gnutlsGlobal.anonCred);
